// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    // i[15] - A/C instruction
    // i[13..14] - nothing
    // i[12] - op-code (if 0 then uses A and D, else M and D)
    // i[11..6] (7) - control bits
    // i[5..3] - destination bits (A reg, D reg, writeM)
    // i[2..0] - jmp bits
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // instruction[15] 1 -> C instruction, 0 -> A instruction
        DMux(in=true, sel=instruction[15], a=ains, b=cins);

        // CPU REGISTERS & ALU

        // Load A reg? -> if c ins and a is a destination bit or a ins
        And(a=cins, b=instruction[5], out=caload);
        Or(a=caload, b=ains, out=aload); // a reg load
        // A reg holds either data from instruction or ALU output
        Mux16(a[0..14]=instruction[0..14], b=aluout, sel=instruction[15], out[0..14]=aregin);
        ARegister(in[0..14]=aregin, load=aload, out[0..14]=areg, out[0..14]=addressM);

        // D reg holds alu output if its destination bit is 1
        And(a=cins, b=instruction[4], out=dload);
        DRegister(in=aluout, load=dload, out=dreg);

        // mem or a register input into ALU?
        Mux16(a[0..14]=areg, b=inM, sel=instruction[12], out=val2);
        ALU(x=dreg, y=val2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluout, out=outM, zr=alu0, ng=alult0);

        // JUMPS (c instruction, jmp bits)
        // 210
        // 000 no jmp       null
        // 001 out > 0      JGT
        // 010 out = 0      JEQ
        // 011 out >= 0     JGE
        // 100 out < 0      JLT
        // 101 out != 0     JNE
        // 110 out <= 0     JLE
        // 111 jmp          JMP
        Or(a=alult0, b=alu0, out=le);   // <=
        Not(in=alult0, out=ge);         // >=
        Not(in=alu0, out=ne);           // !=
        And(a=ge, b=ne, out=gt);        // >
        Mux8Way(a=false, b=gt, c=alu0, d=ge, e=alult0, f=ne, g=le, h=true, sel=instruction[0..2], out=jumpcond);
        // jump only if cins and jumpcon = 1
        And(a=jumpcond, b=cins, out=pcload);
        PC(in[0..14]=areg, load=pcload, inc=true, reset=reset, out[0..14]=pc, out[0..14]=pcout);

        // out M
        And(a=instruction[3], b=cins, out=writeM);
}