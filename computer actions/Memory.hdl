// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // based on the addresses:
        // RAM: [0,011111111111111]
        // Screen: [100000000000000, 101111111111111]
        // Keyboard: 110000000000000

        // address' msb 0 -> ram, else -> screen
        DMux(in=load, sel=address[14], a=loadram, b=loadscr);
        RAM16K(in=in, load=loadram, address=address[0..13], out=ram);
        Screen(in=in, load=loadscr, address=address[0..12], out=scr); // relative address needed
        Keyboard(out=kbd);

        // if any bit other than two msb is 1 and the first two are 1, the number too large
        Or8Way(in=address[0..7], out=o1);
        Or8Way(in[0..4]=address[8..12], in[5..6]=false, out=o2);
        Or(a=o1, b=o2, out=toolarge);

        // if too large -> 0, else kbd
        Mux16(a=kbd, b=false, sel=toolarge, out=kbdor0);

        //00 - RAM
        //01 - RAM
        //10 - screen
        //11 - kbd or too large (0)
        Mux4Way16(a=ram, b=ram, c=scr, d=kbdor0, sel=address[13..14], out=out);
}